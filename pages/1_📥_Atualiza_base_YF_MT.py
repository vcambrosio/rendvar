import streamlit as st
import pandas as pd
import os
import io
import re
import yfinance as yf
import MetaTrader5 as mt5
from datetime import datetime, timedelta
import time
from PIL import Image


with st.sidebar:
    # Cria duas colunas (ajuste a propor√ß√£o conforme necess√°rio)
    col_logo, col_texto = st.columns([1, 3])
    
    with col_logo:
        # Logo redimensionada para 50px de largura
        logo_path = os.path.join("02-imagens", "logo.png")
        if os.path.exists(logo_path):
            logo = Image.open(logo_path)
            base_width = 50
            w_percent = (base_width / float(logo.size[0]))
            h_size = int((float(logo.size[1]) * float(w_percent)))
            logo = logo.resize((base_width, h_size), Image.Resampling.LANCZOS)
            st.image(logo, use_container_width=False)
    
    with col_texto:
        # Texto alinhado verticalmente ao centro
        st.markdown("""
        <div style='display: flex; align-items: center; height: 100%;'>
            <p style='margin: 0;'>Desenvolvido por Vladimir</p>
        </div>
        """, unsafe_allow_html=True)


# T√≠tulo do aplicativo
st.title("üìä Coleta H√≠brida de Dados (YFinance + MetaTrader5)")
st.markdown("**üî• Estrat√©gia H√≠brida:** Dados hist√≥ricos extensos do Yahoo Finance + Dados precisos e recentes do MetaTrader5")

st.markdown("[üîó Link para baixar lista do √çndice Bovespa](https://www.b3.com.br/pt_br/market-data-e-indices/indices/indices-amplos/indice-ibovespa-ibovespa-composicao-da-carteira.htm)")
st.markdown("[üîó Link para baixar lista do √çndice de a√ß√µes com governan√ßa corporativa diferenciada (IGC B3)](https://www.b3.com.br/pt_br/market-data-e-indices/indices/indices-de-governanca/indice-de-acoes-com-governanca-corporativa-diferenciada-igcx-composicao-da-carteira.htm)")
st.markdown("[üîó Link para baixar lista do √çndice Brasil 100 (IBrX 100 B3)](https://www.b3.com.br/pt_br/market-data-e-indices/indices/indices-amplos/indice-brasil-100-ibrx-100-composicao-da-carteira.htm)")
st.markdown("[üîó Link para baixar lista do √çndice Brasil Amplo BM&FBOVESPA (IBrA B3)](https://www.b3.com.br/pt_br/market-data-e-indices/indices/indices-amplos/indice-brasil-amplo-ibra-composicao-da-carteira.htm)")
st.markdown("[üîó Link para baixar lista do √çndice de BDRs n√£o patrocinado-Global (BDRX B3)](https://www.b3.com.br/pt_br/market-data-e-indices/indices/indices-de-segmentos-e-setoriais/indice-de-bdrs-nao-patrocinados-global-bdrx-composicao-da-carteira.htm)")

# === CONFIGURA√á√ïES ===
TIMEFRAME_MT5 = mt5.TIMEFRAME_D1  # di√°rio para MT5
ANOS_YFINANCE = 15  # Mais anos para YFinance (dados hist√≥ricos extensos)
ANOS_MT5 = 5  # AJUSTADO: 5 anos de dados do MT5 (dados recentes e precisos)

# Configura√ß√µes da estrat√©gia h√≠brida
DIAS_OVERLAP = 30  # Dias de sobreposi√ß√£o para garantir continuidade
DATA_CORTE_MT5 = datetime.now() - timedelta(days=365 * 5)  # AJUSTADO: 5 anos atr√°s como ponto de corte

# Fun√ß√£o para criar o diret√≥rio se n√£o existir
def criar_diretorio():
    diretorio = os.path.join("01-dados", "listas_csv")
    if not os.path.exists(diretorio):
        os.makedirs(diretorio)
    return diretorio

# Fun√ß√£o para listar arquivos no diret√≥rio
def listar_arquivos(diretorio):
    if os.path.exists(diretorio):
        return [f for f in os.listdir(diretorio) if f.endswith('.csv')]
    return []

# Fun√ß√£o para extrair nome do arquivo sem extens√£o
def extrair_nome_arquivo(nome_arquivo):
    return os.path.splitext(nome_arquivo)[0]

# Fun√ß√£o para processar arquivo simples (formato original)
def processar_arquivo_simples(uploaded_file, novo_nome, diretorio):
    # Ler o arquivo CSV
    df = pd.read_csv(uploaded_file)
    
    # Verificar se tem a coluna 'C√≥digo'
    if 'C√≥digo' not in df.columns:
        return False, "O arquivo deve conter uma coluna chamada 'C√≥digo'."
    
    # Extrair apenas a coluna 'C√≥digo'
    codigos = df['C√≥digo'].tolist()
    
    # Salvar em um novo arquivo sem cabe√ßalho, um ticker por linha
    caminho_completo = os.path.join(diretorio, f"{novo_nome}.csv")
    with open(caminho_completo, 'w') as f:
        for codigo in codigos:
            f.write(f"{codigo}\n")
    
    return True, f"Arquivo '{novo_nome}.csv' salvo com sucesso!"

# Fun√ß√£o para detectar se o arquivo √© complexo
def detectar_arquivo_complexo(content_str):
    return ';' in content_str and re.search(r'[A-Z0-9]{4}[0-9]?;', content_str)

# Fun√ß√£o para processar arquivo complexo
def processar_arquivo_complexo(content_str, novo_nome, diretorio):
    linhas = content_str.strip().split('\n')
    codigos = []

    # Definir padr√£o de ticker com base no nome do arquivo
    if "BDR" in novo_nome.upper():
        padrao_ticker = r'^[A-Z]{4}34$'
    else:
        padrao_ticker = r'^[A-Z]{4}(3|4|11)$'

    for i, linha in enumerate(linhas):
        linha = linha.strip()
        if linha.startswith('Quantidade') or linha.startswith('Redutor'):
            continue
        if i < 2:
            continue

        partes = linha.split(';')
        for parte in partes:
            parte = parte.replace('"', '').strip()
            if re.match(padrao_ticker, parte):
                codigos.append(parte)
                break

    caminho_completo = os.path.join(diretorio, f"{novo_nome}.csv")
    with open(caminho_completo, 'w') as f:
        for codigo in codigos:
            f.write(f"{codigo}\n")

    return True, f"Arquivo complexo processado. '{novo_nome}.csv' salvo com {len(codigos)} tickers!"

# Fun√ß√£o principal de processamento que identifica o tipo de arquivo
def processar_arquivo(uploaded_file, novo_nome, diretorio):
    content = uploaded_file.read()
    content_str = content.decode('utf-8', errors='replace')
    uploaded_file.seek(0)
    
    if detectar_arquivo_complexo(content_str):
        return processar_arquivo_complexo(content_str, novo_nome, diretorio)
    else:
        try:
            return processar_arquivo_simples(uploaded_file, novo_nome, diretorio)
        except Exception as e:
            return False, f"Erro ao processar o arquivo: {str(e)}"

# Fun√ß√£o para ler os tickers de um arquivo CSV
def ler_tickers_do_arquivo(caminho_arquivo):
    tickers = []
    with open(caminho_arquivo, 'r') as file:
        for linha in file:
            ticker = linha.strip()
            if ticker:
                tickers.append(ticker)
    return tickers

# Fun√ß√£o para verificar arquivo parquet corrompido
def verificar_parquet(caminho_bd):
    if os.path.exists(caminho_bd):
        try:
            _ = pd.read_parquet(caminho_bd)
            return True
        except Exception as e:
            st.warning(f"Arquivo parquet corrompido: {str(e)}. Ser√° criado um novo banco de dados.")
            try:
                os.remove(caminho_bd)
            except Exception as del_e:
                st.error(f"N√£o foi poss√≠vel remover o arquivo corrompido: {str(del_e)}")
                return False
            return True
    return True

# === FUN√á√ïES YFINANCE ===

def baixar_dados_yfinance(tickers, nome_lista, base_existente):
    """Baixa dados hist√≥ricos extensos usando yfinance"""
    
    if not tickers:
        return pd.DataFrame(), []
    
    # Configurar per√≠odo de download (mais extenso para YFinance)
    data_fim = datetime.now()
    data_inicio = data_fim - timedelta(days=ANOS_YFINANCE*365)
    
    all_data = pd.DataFrame()
    sucessos_yf = []
    
    for i, ticker in enumerate(tickers):
        try:
            ticker_yf = f"{ticker}.SA"
            
            # Baixar dados
            dados = yf.download(ticker_yf, 
                               start=data_inicio.strftime('%Y-%m-%d'), 
                               end=data_fim.strftime('%Y-%m-%d'), 
                               progress=False)
            
            if not dados.empty:
                dados.reset_index(inplace=True)
                
                dados_processados = pd.DataFrame()
                dados_processados['Date'] = dados['Date']
                
                for col in ['Open', 'High', 'Low', 'Close', 'Volume']:
                    if col in dados.columns:
                        dados_processados[col] = dados[col]
                    else:
                        dados_processados[col] = None
                
                dados_processados['Ticker'] = ticker
                dados_processados['Lista'] = nome_lista
                dados_processados['Fonte'] = 'YFinance'  # Marcar a fonte
                
                # Filtrar dados at√© a data de corte do MT5 (deixar overlap)
                data_limite = DATA_CORTE_MT5 + timedelta(days=DIAS_OVERLAP)
                dados_processados = dados_processados[dados_processados['Date'] <= data_limite]
                
                if not dados_processados.empty:
                    all_data = pd.concat([all_data, dados_processados], ignore_index=True)
                    sucessos_yf.append(ticker)
                
            time.sleep(0.1)  # Pausa para evitar sobrecarga
            
        except Exception as e:
            st.warning(f"Erro YFinance para {ticker}: {str(e)}")
    
    return all_data, sucessos_yf

# === FUN√á√ïES MT5 ===

def conectar_mt5():
    """Conecta ao MetaTrader5"""
    if not mt5.initialize():
        return False, f"Falha ao inicializar MetaTrader5: {mt5.last_error()}"
    
    account_info = mt5.account_info()
    if account_info is None:
        mt5.shutdown()
        return False, f"N√£o conectado ao servidor: {mt5.last_error()}"
    
    return True, f"Conectado √† conta: {account_info.login} - Servidor: {account_info.server}"

def verificar_simbolo_mt5(ativo):
    """Verifica se o s√≠mbolo existe no MT5"""
    symbols = mt5.symbols_get()
    if symbols is None:
        return False
    
    symbol_names = [s.name for s in symbols]
    return ativo in symbol_names

def baixar_dados_mt5(tickers, nome_lista, base_existente):
    """Baixa dados recentes e precisos usando MT5"""
    
    if not tickers:
        return pd.DataFrame(), [], []
    
    # Conectar ao MT5
    conectado, msg_conexao = conectar_mt5()
    if not conectado:
        st.error(f"Erro MT5: {msg_conexao}")
        return pd.DataFrame(), [], []
    
    all_data = pd.DataFrame()
    sucessos_mt5 = []
    nao_encontrados_mt5 = []
    
    # Data de in√≠cio para MT5 (dados recentes)
    data_inicio_mt5 = DATA_CORTE_MT5 - timedelta(days=DIAS_OVERLAP)
    data_fim = datetime.now()
    
    for ticker in tickers:
        # Lista de varia√ß√µes para tentar
        variantes = [ticker, ticker + "F"]
        dados_coletados = False
        
        for ativo in variantes:
            if not verificar_simbolo_mt5(ativo):
                continue
                
            try:
                # Tentar coletar dados do MT5
                rates = mt5.copy_rates_range(ativo, TIMEFRAME_MT5, data_inicio_mt5, data_fim)
                
                if rates is None:
                    # M√©todo alternativo
                    total_days = (data_fim - data_inicio_mt5).days
                    rates = mt5.copy_rates_from(ativo, TIMEFRAME_MT5, data_fim, total_days)
                
                if rates is not None and len(rates) > 0:
                    df = pd.DataFrame(rates)
                    df['time'] = pd.to_datetime(df['time'], unit='s')
                    
                    # Filtrar apenas dados a partir da data de corte
                    df = df[df['time'] >= data_inicio_mt5]
                    
                    if len(df) > 0:
                        df_fmt = pd.DataFrame({
                            "Date": df['time'],
                            "Open": df['open'],
                            "High": df['high'],
                            "Low": df['low'],
                            "Close": df['close'],
                            "Volume": df['tick_volume'].astype("int64"),
                            "Ticker": ticker,  # Sempre usar ticker original
                            "Lista": nome_lista,
                            "Fonte": 'MT5'  # Marcar a fonte
                        })
                        
                        all_data = pd.concat([all_data, df_fmt], ignore_index=True)
                        sucessos_mt5.append(f"{ticker}" + (f" (via {ativo})" if ativo != ticker else ""))
                        dados_coletados = True
                        break
                        
            except Exception as e:
                continue
        
        if not dados_coletados:
            nao_encontrados_mt5.append(ticker)
        
        time.sleep(0.1)
    
    mt5.shutdown()
    return all_data, sucessos_mt5, nao_encontrados_mt5

# === FUN√á√ÉO H√çBRIDA PRINCIPAL ===

def baixar_dados_hibridos(tickers, nome_lista):
    """
    Estrat√©gia h√≠brida: YFinance para dados hist√≥ricos + MT5 para dados recentes
    """
    
    if not tickers:
        return False, "Nenhum ticker encontrado para baixar."
    
    # Caminho para o arquivo parquet
    caminho_bd = os.path.join("01-dados", "ativos_historicos.parquet")
    
    # Verificar arquivo parquet corrompido
    if not verificar_parquet(caminho_bd):
        return False, "Erro ao tratar o arquivo parquet existente."
    
    # Carregar base existente
    if os.path.exists(caminho_bd):
        try:
            base_existente = pd.read_parquet(caminho_bd)
        except:
            base_existente = pd.DataFrame()
    else:
        base_existente = pd.DataFrame()
    
    # Progress bar
    progress_container = st.container()
    with progress_container:
        progress_bar = st.progress(0)
        status_text = st.empty()
    
    resultados = {
        'yfinance_sucessos': [],
        'mt5_sucessos': [],
        'mt5_nao_encontrados': [],
        'total_registros_yf': 0,
        'total_registros_mt5': 0
    }
    
    try:
        # FASE 1: Coleta via YFinance (dados hist√≥ricos extensos)
        status_text.text("üîÑ FASE 1: Coletando dados hist√≥ricos via Yahoo Finance...")
        progress_bar.progress(0.1)
        
        dados_yfinance, sucessos_yf = baixar_dados_yfinance(tickers, nome_lista, base_existente)
        resultados['yfinance_sucessos'] = sucessos_yf
        resultados['total_registros_yf'] = len(dados_yfinance)
        
        progress_bar.progress(0.5)
        
        # FASE 2: Coleta via MT5 (dados recentes e precisos)
        status_text.text("üîÑ FASE 2: Coletando dados recentes via MetaTrader5...")
        
        dados_mt5, sucessos_mt5, nao_encontrados_mt5 = baixar_dados_mt5(tickers, nome_lista, base_existente)
        resultados['mt5_sucessos'] = sucessos_mt5
        resultados['mt5_nao_encontrados'] = nao_encontrados_mt5
        resultados['total_registros_mt5'] = len(dados_mt5)
        
        progress_bar.progress(0.8)
        
        # FASE 3: Consolida√ß√£o dos dados
        status_text.text("üîÑ FASE 3: Consolidando dados h√≠bridos...")
        
        # Combinar dados YFinance e MT5
        dados_consolidados = pd.DataFrame()
        
        if not dados_yfinance.empty:
            dados_consolidados = pd.concat([dados_consolidados, dados_yfinance], ignore_index=True)
        
        if not dados_mt5.empty:
            dados_consolidados = pd.concat([dados_consolidados, dados_mt5], ignore_index=True)
        
        if dados_consolidados.empty:
            progress_bar.empty()
            status_text.empty()
            return False, "Nenhum dado coletado por nenhuma das fontes."
        
        # Remover duplicatas (priorizar MT5 sobre YFinance para datas sobrepostas)
        dados_consolidados['Date'] = pd.to_datetime(dados_consolidados['Date'])
        dados_consolidados = dados_consolidados.sort_values(['Ticker', 'Date', 'Fonte'])
        
        # Em caso de duplicata na mesma data e ticker, manter MT5 (vem depois na ordena√ß√£o)
        dados_consolidados = dados_consolidados.drop_duplicates(
            subset=['Date', 'Ticker'], keep='last'
        )
        
        # Remover dados antigos da mesma lista
        if not base_existente.empty and 'Lista' in base_existente.columns:
            base_existente = base_existente[base_existente['Lista'] != nome_lista]
            
            if not base_existente.empty:
                # Garantir que todas as colunas necess√°rias existam
                for col in ['Fonte']:
                    if col not in base_existente.columns:
                        base_existente[col] = 'Legacy'  # Marcar dados antigos
                
                dados_finais = pd.concat([base_existente, dados_consolidados], ignore_index=True)
            else:
                dados_finais = dados_consolidados
        else:
            dados_finais = dados_consolidados
        
        progress_bar.progress(0.9)
        
        # Salvar dados
        os.makedirs(os.path.dirname(caminho_bd), exist_ok=True)
        
        dados_finais = dados_finais.sort_values(by=['Lista', 'Ticker', 'Date'])
        dados_finais = dados_finais.drop_duplicates(subset=["Date","Ticker"])
        dados_finais.to_parquet(caminho_bd, index=False)
        
        progress_bar.progress(1.0)
        
    finally:
        # Limpar progress bar
        progress_bar.empty()
        status_text.empty()
    
    # Criar mensagem de resultado
    mensagem = f"üéØ **Coleta H√≠brida Conclu√≠da para '{nome_lista}'**\n\n"
    
    mensagem += f"üìä **Yahoo Finance (Dados Hist√≥ricos):**\n"
    mensagem += f"   ‚Ä¢ Sucessos: {len(resultados['yfinance_sucessos'])}\n"
    mensagem += f"   ‚Ä¢ Registros: {resultados['total_registros_yf']:,}\n\n"
    
    mensagem += f"üéØ **MetaTrader5 (Dados Precisos):**\n"
    mensagem += f"   ‚Ä¢ Sucessos: {len(resultados['mt5_sucessos'])}\n"
    mensagem += f"   ‚Ä¢ N√£o encontrados: {len(resultados['mt5_nao_encontrados'])}\n"
    mensagem += f"   ‚Ä¢ Registros: {resultados['total_registros_mt5']:,}\n\n"
    
    total_registros = resultados['total_registros_yf'] + resultados['total_registros_mt5']
    mensagem += f"üìà **Total Consolidado:** {total_registros:,} registros"
    
    return True, mensagem

# Fun√ß√£o para atualizar dados hist√≥ricos de uma lista espec√≠fica
def atualizar_lista(nome_arquivo, diretorio):
    caminho_arquivo = os.path.join(diretorio, nome_arquivo)
    nome_lista = extrair_nome_arquivo(nome_arquivo)
    tickers = ler_tickers_do_arquivo(caminho_arquivo)
    
    # Usar fun√ß√£o h√≠brida
    sucesso, mensagem = baixar_dados_hibridos(tickers, nome_lista)
    return sucesso, mensagem

# Fun√ß√£o para atualizar todas as listas
def atualizar_todas_listas(diretorio):
    arquivos = listar_arquivos(diretorio)
    
    if not arquivos:
        return False, "Nenhuma lista encontrada para atualizar."
    
    resultados = []
    
    for arquivo in arquivos:
        st.write(f"üîÑ Processando lista: {arquivo}")
        sucesso, mensagem = atualizar_lista(arquivo, diretorio)
        status = '‚úÖ' if sucesso else '‚ùå'
        resultados.append(f"{status} Lista '{extrair_nome_arquivo(arquivo)}'")
        
        if sucesso:
            st.success(mensagem)
        else:
            st.error(f"Erro na lista {arquivo}: {mensagem}")
    
    return True, f"üéØ **Processo H√≠brido Conclu√≠do:**\n" + "\n".join(resultados)

def remover_dados_historicos_por_lista(nome_lista):
    caminho_bd = os.path.join("01-dados", "ativos_historicos.parquet")
    
    if not os.path.exists(caminho_bd):
        return True
    
    try:
        df = pd.read_parquet(caminho_bd)
        
        if 'Lista' not in df.columns:
            return True
        
        df_filtrado = df[df['Lista'] != nome_lista]
        df_filtrado.to_parquet(caminho_bd, index=False)
        
        return True
    except Exception as e:
        st.error(f"Erro ao remover dados hist√≥ricos da lista '{nome_lista}': {str(e)}")
        return False

# === INTERFACE PRINCIPAL ===

# Status da estrat√©gia h√≠brida
st.header("üî• Status da Estrat√©gia H√≠brida")

col1, col2 = st.columns(2)

with col1:
    st.subheader("üìà Yahoo Finance")
    st.write(f"**Per√≠odo:** {ANOS_YFINANCE} anos de hist√≥rico")
    st.write(f"**Finalidade:** Dados hist√≥ricos extensos")
    st.write("**Status:** ‚úÖ Sempre dispon√≠vel")

with col2:
    st.subheader("üéØ MetaTrader5")
    st.write(f"**Per√≠odo:** {ANOS_MT5} anos recentes")
    st.write(f"**Finalidade:** Dados precisos e atualizados")
    
    # Testar conex√£o MT5
    conectado, msg_conexao = conectar_mt5()
    if conectado:
        st.write("**Status:** ‚úÖ Conectado")
        st.success(msg_conexao)
        mt5.shutdown()
    else:
        st.write("**Status:** ‚ùå Desconectado")
        st.error(msg_conexao)

# Criar diret√≥rio se n√£o existir
diretorio = criar_diretorio()

# Interface principal
st.header("üìÅ Upload e Processamento de Arquivo CSV")

uploaded_file = st.file_uploader("Selecione um arquivo CSV", type=['csv'])

if uploaded_file is not None:
    nome_sugerido = extrair_nome_arquivo(uploaded_file.name)
    novo_nome = st.text_input("Digite um nome para o arquivo (sem extens√£o):", value=nome_sugerido)
    
    if novo_nome:
        if st.button("Processar e Salvar"):
            sucesso, mensagem = processar_arquivo(uploaded_file, novo_nome, diretorio)
            if sucesso:
                st.success(mensagem)
            else:
                st.error(mensagem)

# Se√ß√£o para gerenciar arquivos existentes
st.header("üìã Gerenciar Arquivos Existentes")

arquivos = listar_arquivos(diretorio)
if arquivos:
    st.write(f"Arquivos na pasta '{diretorio}':")
    
    for arquivo in arquivos:
        col1, col2, col3 = st.columns([3, 1, 1])
        with col1:
            st.write(arquivo)
        with col2:
            if st.button("Excluir", key=f"del_{arquivo}"):
                nome_lista = extrair_nome_arquivo(arquivo)
                os.remove(os.path.join(diretorio, arquivo))
                if remover_dados_historicos_por_lista(nome_lista):
                    st.success(f"Arquivo '{arquivo}' e seus dados hist√≥ricos foram exclu√≠dos com sucesso!")
                else:
                    st.error(f"Arquivo '{arquivo}' foi exclu√≠do, mas houve um problema ao remover os dados hist√≥ricos.")
                st.rerun()
        with col3:
            if st.button("üî• Atualizar H√≠brido", key=f"upd_{arquivo}"):
                with st.spinner(f"Executando coleta h√≠brida para '{arquivo}'..."):
                    sucesso, mensagem = atualizar_lista(arquivo, diretorio)
                    if sucesso:
                        st.success(mensagem)
                    else:
                        st.error(mensagem)
    
    # Linha com bot√µes para a√ß√µes em massa
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üóëÔ∏è Excluir Todos os Arquivos"):
            for arquivo in arquivos:
                os.remove(os.path.join(diretorio, arquivo))
            
            caminho_bd = os.path.join("01-dados", "ativos_historicos.parquet")
            if os.path.exists(caminho_bd):
                try:
                    os.remove(caminho_bd)
                    st.success("Todos os arquivos e o banco de dados hist√≥rico foram exclu√≠dos!")
                except Exception as e:
                    st.error(f"Arquivos de lista foram exclu√≠dos, mas houve um problema ao remover o banco de dados hist√≥rico: {str(e)}")
            else:
                st.success("Todos os arquivos foram exclu√≠dos!")
            st.rerun()
    
    with col2:
        if st.button("üî• Atualizar Todas - H√≠brido"):
            with st.spinner("Executando coleta h√≠brida para todas as listas..."):
                sucesso, mensagem = atualizar_todas_listas(diretorio)
                if sucesso:
                    st.success(mensagem)
                else:
                    st.error(mensagem)
else:
    st.info("Nenhum arquivo encontrado no diret√≥rio.")

# Exibir informa√ß√µes sobre o banco de dados
st.header("üìä Informa√ß√µes do Banco de Dados H√≠brido")
caminho_bd = os.path.join("01-dados", "ativos_historicos.parquet")

if os.path.exists(caminho_bd):
    try:
        if verificar_parquet(caminho_bd):
            df_info = pd.read_parquet(caminho_bd)
            
            st.write(f"**Total de registros:** {len(df_info):,}")
            
            # Informa√ß√µes por fonte de dados
            if 'Fonte' in df_info.columns:
                st.write("**Distribui√ß√£o por fonte de dados:**")
                fonte_dist = df_info['Fonte'].value_counts()
                for fonte, count in fonte_dist.items():
                    percentage = (count / len(df_info)) * 100
                    if fonte == 'YFinance':
                        st.write(f"   üìà **{fonte}:** {count:,} registros ({percentage:.1f}%) - Dados hist√≥ricos")
                    elif fonte == 'MT5':
                        st.write(f"   üéØ **{fonte}:** {count:,} registros ({percentage:.1f}%) - Dados precisos")
                    else:
                        st.write(f"   üìã **{fonte}:** {count:,} registros ({percentage:.1f}%)")
            
            # Informa√ß√µes por lista
            if 'Lista' in df_info.columns:
                st.write("**Dados por lista:**")
                resumo_listas = df_info.groupby('Lista').agg({
                    'Ticker': 'nunique',
                    'Date': ['min', 'max']
                }).round(2)
                
                resumo_listas.columns = ['Tickers', 'Data In√≠cio', 'Data Fim']
                st.dataframe(resumo_listas)
            
            # Intervalo de datas geral
            try:
                if 'Date' in df_info.columns:
                    df_info['Date'] = pd.to_datetime(df_info['Date'])
                    min_data = df_info['Date'].min().strftime('%d/%m/%Y')
                    max_data = df_info['Date'].max().strftime('%d/%m/%Y')
                    st.write(f"**Per√≠odo total:** {min_data} at√© {max_data}")
                    
                    # Mostrar ponto de transi√ß√£o YFinance -> MT5
                    data_corte_str = DATA_CORTE_MT5.strftime('%d/%m/%Y')
                    st.info(f"üîÑ **Ponto de transi√ß√£o:** Dados antes de {data_corte_str} predominantemente do Yahoo Finance, ap√≥s essa data do MetaTrader5")
            except:
                st.warning("N√£o foi poss√≠vel determinar o intervalo de datas.")
            
            # Tickers √∫nicos
            if 'Ticker' in df_info.columns:
                tickers_unicos = df_info['Ticker'].nunique()
                st.write(f"**Total de tickers √∫nicos:** {tickers_unicos}")
                
        else:
            st.error("N√£o foi poss√≠vel acessar o banco de dados. O arquivo parquet pode estar corrompido.")
                
    except Exception as e:
        st.error(f"Erro ao carregar informa√ß√µes do banco de dados: {str(e)}")
else:
    st.info("Banco de dados de cota√ß√µes ainda n√£o foi criado.")

# Se√ß√£o para visualizar os √∫ltimos registros
st.header("üìã √öltimos Registros Atualizados")

if os.path.exists(caminho_bd):
    try:
        if verificar_parquet(caminho_bd):
            df_ultimos = pd.read_parquet(caminho_bd)
            
            # Ordenar por data decrescente
            if 'Date' in df_ultimos.columns:
                try:
                    df_ultimos['Date'] = pd.to_datetime(df_ultimos['Date'])
                    df_ultimos = df_ultimos.sort_values(by='Date', ascending=False)
                except:
                    st.warning("N√£o foi poss√≠vel ordenar por data.")
            
            st.write(f"Exibindo os 50 √∫ltimos registros do banco h√≠brido (total: {len(df_ultimos):,}):")
            
            # Op√ß√µes de filtro
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if 'Lista' in df_ultimos.columns:
                    listas_disponiveis = ['Todas'] + sorted(df_ultimos['Lista'].unique().tolist())
                    lista_selecionada = st.selectbox('Filtrar por lista:', listas_disponiveis)
            
            with col2:
                if 'Ticker' in df_ultimos.columns:
                    tickers_disponiveis = ['Todos'] + sorted(df_ultimos['Ticker'].unique().tolist())
                    ticker_selecionado = st.selectbox('Filtrar por ticker:', tickers_disponiveis)
            
            with col3:
                if 'Fonte' in df_ultimos.columns:
                    fontes_disponiveis = ['Todas'] + sorted(df_ultimos['Fonte'].unique().tolist())
                    fonte_selecionada = st.selectbox('Filtrar por fonte:', fontes_disponiveis)
            
            # Aplicar filtros
            df_filtrado = df_ultimos.copy()
            
            if 'Lista' in df_ultimos.columns and lista_selecionada != 'Todas':
                df_filtrado = df_filtrado[df_filtrado['Lista'] == lista_selecionada]
            
            if 'Ticker' in df_ultimos.columns and ticker_selecionado != 'Todos':
                df_filtrado = df_filtrado[df_filtrado['Ticker'] == ticker_selecionado]
                
            if 'Fonte' in df_ultimos.columns and fonte_selecionada != 'Todas':
                df_filtrado = df_filtrado[df_filtrado['Fonte'] == fonte_selecionada]
            
            # Exibir dataframe com destaque para a fonte
            if not df_filtrado.empty:
                # Preparar dados para exibi√ß√£o
                df_display = df_filtrado.head(50).copy()
                
                # Formattar a coluna Fonte com emojis
                if 'Fonte' in df_display.columns:
                    df_display['Fonte'] = df_display['Fonte'].map({
                        'YFinance': 'üìà YFinance',
                        'MT5': 'üéØ MT5',
                        'Legacy': 'üìã Legacy'
                    }).fillna(df_display['Fonte'])
                
                st.dataframe(df_display, use_container_width=True)
                
                # Op√ß√£o para baixar os dados filtrados
                csv = df_filtrado.head(50).to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• Baixar dados visualizados como CSV",
                    data=csv,
                    file_name=f"dados_hibridos_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
            else:
                st.info("Nenhum registro encontrado com os filtros aplicados.")
                
        else:
            st.error("N√£o foi poss√≠vel acessar o banco de dados.")
                
    except Exception as e:
        st.error(f"Erro ao carregar dados: {str(e)}")

else:
    st.info("Banco de dados ainda n√£o foi criado.")
    
    if st.button("üî• Criar banco h√≠brido agora"):
        with st.spinner("Criando banco de dados h√≠brido..."):
            sucesso, mensagem = atualizar_todas_listas(diretorio)
            if sucesso:
                st.success(mensagem)
                st.rerun()
            else:
                st.error(f"Erro ao criar o banco de dados: {mensagem}")

# Op√ß√µes avan√ßadas
with st.expander("‚öôÔ∏è Configura√ß√µes Avan√ßadas"):
    st.subheader("üîß Par√¢metros da Estrat√©gia H√≠brida")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**üìà Yahoo Finance (Dados Hist√≥ricos)**")
        st.write(f"‚Ä¢ Per√≠odo: {ANOS_YFINANCE} anos")
        st.write(f"‚Ä¢ Coleta at√©: {DATA_CORTE_MT5.strftime('%d/%m/%Y')}")
        st.write("‚Ä¢ Vantagem: Hist√≥rico extenso")
        st.write("‚Ä¢ Desvantagem: Menos preciso")
    
    with col2:
        st.write("**üéØ MetaTrader5 (Dados Precisos)**")
        st.write(f"‚Ä¢ Per√≠odo: {ANOS_MT5} anos recentes")
        st.write(f"‚Ä¢ Coleta a partir: {DATA_CORTE_MT5.strftime('%d/%m/%Y')}")
        st.write("‚Ä¢ Vantagem: Dados precisos")
        st.write("‚Ä¢ Desvantagem: Hist√≥rico limitado")
    
    st.write(f"**üîÑ Overlap:** {DIAS_OVERLAP} dias de sobreposi√ß√£o para garantir continuidade")
    
    st.subheader("üß™ Testes de Conectividade")
    
    col_test1, col_test2 = st.columns(2)
    
    with col_test1:
        if st.button("üß™ Testar Yahoo Finance"):
            with st.spinner("Testando Yahoo Finance..."):
                try:
                    test_data = yf.download("VALE3.SA", period="5d", progress=False)
                    if not test_data.empty:
                        st.success(f"‚úÖ Yahoo Finance OK - {len(test_data)} registros de teste")
                    else:
                        st.error("‚ùå Yahoo Finance retornou dados vazios")
                except Exception as e:
                    st.error(f"‚ùå Erro no Yahoo Finance: {str(e)}")
    
    with col_test2:
        if st.button("üß™ Testar MetaTrader5"):
            conectado, msg = conectar_mt5()
            if conectado:
                st.success(f"‚úÖ {msg}")
                
                # Mostrar alguns s√≠mbolos como exemplo
                try:
                    symbols = mt5.symbols_get()
                    if symbols:
                        symbols_br = [s.name for s in symbols if any(s.name.endswith(suffix) for suffix in ['3', '4', '11', 'F']) and len(s.name) <= 6][:5]
                        if symbols_br:
                            st.write("**S√≠mbolos de exemplo:**", ", ".join(symbols_br))
                except:
                    pass
                
                mt5.shutdown()
            else:
                st.error(f"‚ùå {msg}")
    
    st.subheader("üóÉÔ∏è Gerenciamento do Banco")
    
    if st.button("üîÑ Resetar banco de dados h√≠brido"):
        if os.path.exists(caminho_bd):
            try:
                os.remove(caminho_bd)
                st.success("‚úÖ Banco de dados resetado com sucesso!")
                st.info("Execute 'Atualizar Todas - H√≠brido' para recriar.")
            except Exception as e:
                st.error(f"‚ùå Erro ao resetar: {str(e)}")
        else:
            st.info("‚ÑπÔ∏è N√£o existe banco de dados para resetar.")

# Informa√ß√µes sobre a estrat√©gia h√≠brida
with st.expander("‚ÑπÔ∏è Como Funciona a Estrat√©gia H√≠brida"):
    st.markdown("""
    ## üî• Estrat√©gia H√≠brida: O Melhor de Dois Mundos
    
    ### üìä **Fluxo de Coleta:**
    
    1. **üìà FASE 1 - Yahoo Finance (Dados Hist√≥ricos)**
       - Coleta dados de at√© **15 anos** atr√°s
       - Para at√© aproximadamente **2 anos** atr√°s
       - Garante hist√≥rico extenso para an√°lises de longo prazo
    
    2. **üéØ FASE 2 - MetaTrader5 (Dados Precisos)**  
       - Coleta dados dos **√∫ltimos 5 anos**
       - Dados mais precisos e atualizados
       - Hor√°rios corretos do mercado brasileiro
       - Volume mais confi√°vel
    
    3. **üîÑ FASE 3 - Consolida√ß√£o Inteligente**
       - Remove duplicatas priorizando MT5
       - Mant√©m continuidade temporal
       - Marca origem dos dados (fonte)
    
    ### üéØ **Vantagens:**
    - ‚úÖ **Hist√≥rico extenso** (15+ anos via Yahoo Finance)
    - ‚úÖ **Dados precisos** (5 anos recentes via MT5)
    - ‚úÖ **Sem lacunas** (overlap de 30 dias)
    - ‚úÖ **Atualiza√ß√µes incrementais**
    - ‚úÖ **Fallback autom√°tico** (se MT5 falhar, mant√©m YF)
    - ‚úÖ **Rastreabilidade** (sabe origem de cada dado)
    
    ### üìã **Cen√°rios de Uso:**
    - **Backtesting longo prazo:** Usa dados hist√≥ricos do YF (10+ anos atr√°s)
    - **An√°lises recentes:** Usa dados precisos do MT5 (√∫ltimos 5 anos)
    - **Relat√≥rios:** Combina ambos com total transpar√™ncia
    
    ### üîß **Configura√ß√£o Atual:**
    - **Yahoo Finance:** 15 anos (dados at√© 5 anos atr√°s)
    - **MetaTrader5:** 5 anos recentes + overlap
    - **Overlap:** 30 dias para garantir continuidade
    - **Prioridade:** MT5 > YFinance em caso de duplicata
    """)